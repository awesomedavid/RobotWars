import java.util.ArrayList;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.Input;

public abstract class Enemies {
	protected float x, y;

	Enemies(float x, float y) {
		this.x = x;
		this.y = y;
	}

	abstract void update(GameContainer gc);

	abstract void draw(Graphics g);

}

class BasicE1 extends Enemies {
	private ArrayList<EnemyProjectile> projectiles = new ArrayList<>();
	float proW, proH, proDam, shotTimer, shotDelay;
	double proxSpeed, proySpeed;
	int size;

	BasicE1(float x, float y) {
		super(x, y);
		size = 50;
		proW = 10;
		proH = 10;
		shotTimer = 0;
		shotDelay = 200;
	}

	public void draw(Graphics g) {
		for (int i = 0; i < projectiles.size(); i++) {
			projectiles.get(i).draw(g);
		}
		g.setColor(new Color(245, 100, 100));
		g.fillRect(x, y, 60, 60);
	}

	public void update(GameContainer gc) {
		speeds();
		if (shotTimer > 0) {
			shotTimer--;
		}
		for (int i = 0; i < projectiles.size(); i++) {
			projectiles.get(i).update(gc);
			if (projectiles.get(i).getX() < 0 || projectiles.get(i).getX() > Engine.width
					|| projectiles.get(i).getY() < 0 || projectiles.get(i).getY() > Engine.height) {
				projectiles.remove(i);
			}
		}
		if (shotTimer <= 0) {
			projectiles.add(new EnemyProjectile(x + size / 2, y + size / 2, proW, proH, proxSpeed, proySpeed, proDam));
			shotTimer = shotDelay;
		}
	}

	public void speeds() {
		float xD = Engine.p.getX() - x;
		float yD = Engine.p.getY()-y;	
		float ratio = yD/xD;
			proxSpeed = 1;
			proySpeed = 1*ratio;
				
		System.out.println(ratio);
	}

	public void borders() {
		if (x < 0)
			x = 0;
		if (x + size > Engine.width)
			x = Engine.width - size;
		if (y < 0)
			y = 0;
		if (y + size > Engine.height)
			y = Engine.height - size;
	}
}
