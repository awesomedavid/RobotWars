import java.awt.geom.Area;
import java.util.ArrayList;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.Input;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Shape;

public class Player extends GameObject {
	private final double ACCEL = .003f;
	public String direction, directionM;
	public ArrayList<PlayerProjectile> projectiles = new ArrayList<>();
	private int roomX, roomY;
	private int size;
	private float proW, proH, proDam, shotTimer, shotDelay, curH, maxH;
	private double proxSpeed, proySpeed;
	private double xSpeed, ySpeed;

	public Player(float x, float y, Image im) {
		super(x, y, im);
		maxH = 5;
		curH = maxH;
		size = 50;
		proW = 4;
		proH = 4;
		shotTimer = 0;
		shotDelay = 200;
		proxSpeed = .5;
		proySpeed = .5;
		xSpeed = 0;
		ySpeed = 0;
	}

	public void draw(Graphics g) {
		if (curH > 0) {
			g.drawImage(im, x, y);
		}
		for (int i = 0; i < projectiles.size(); i++) {
			projectiles.get(i).draw(g);
		}
		healthbar(g);
	}

	public void update(GameContainer gc) {
		Input input = gc.getInput();

			x += xSpeed;
			y += ySpeed;

		if (curH > 0) {
			keys(gc);
			for (int i = 0; i < projectiles.size(); i++) {
				projectiles.get(i).update(gc);
				if (projectiles.get(i).getX() < 75 || projectiles.get(i).getX() > Engine.width - 75
						|| projectiles.get(i).getY() < 75 || projectiles.get(i).getY() > Engine.height - 75) {
					projectiles.remove(i);
				}
			}
			if (shotTimer > 0) {
				shotTimer--;
			}
			borders();
		}

	}

	public void healthbar(Graphics g) {
		for (int i = 0; i < maxH; i++) {
			g.drawImage(Engine.heartd, 50 + i * 50, 50);
		}
		for (int i = 0; i < curH; i++) {
			g.drawImage(Engine.heart, 50 + i * 50, 50);
		}
	}

	public void borders() {
		if (x < 75)
			x = 75;
		if (x + size > Engine.width - 75)
			x = Engine.width - size - 75;
		if (y < 75)
			y = 75;
		if (y + size > Engine.height - 75)
			y = Engine.height - size - 75;
	}

	public void keys(GameContainer gc) {
		Input input = gc.getInput();
		if (input.isKeyDown(Input.KEY_W)) {
			ySpeed = Math.max(-.4, ySpeed - ACCEL);
			directionM = "up";
		}else {
			if(ySpeed>0) {
				ySpeed-=.01;
			}
		}
		if (input.isKeyDown(Input.KEY_S)) {
			ySpeed = Math.min(.4, ySpeed + ACCEL);
			directionM = "down";
		}else {
			if(ySpeed>0) {
				ySpeed-=.01;
			}
		}
		if (input.isKeyDown(Input.KEY_A)) {
			xSpeed = Math.max(-.4, xSpeed - ACCEL);
			directionM = "left";
		}else {
			if(xSpeed<0) {
				xSpeed=xSpeed+.01;
			}
		}
		if (input.isKeyDown(Input.KEY_D)) {
			xSpeed = Math.min(.4, xSpeed + ACCEL);
			directionM = "right";
		}else {
			if(xSpeed>0) {
				xSpeed=xSpeed-.01;
			}
		}

		if (input.isKeyDown(Input.KEY_UP) && shotTimer <= 0) {
			direction = "up";
			projectiles.add(new PlayerProjectile(x + size / 2, y + size / 2, proW, proH, proxSpeed * 0, proySpeed * -1,
					proDam));
			shotTimer = shotDelay;
		}
		if (input.isKeyDown(Input.KEY_DOWN) && shotTimer <= 0) {
			direction = "down";
			projectiles.add(
					new PlayerProjectile(x + size / 2, y + size / 2, proW, proH, proxSpeed * 0, proySpeed * 1, proDam));
			shotTimer = shotDelay;
		}
		if (input.isKeyDown(Input.KEY_LEFT) && shotTimer <= 0) {
			direction = "left";
			projectiles.add(new PlayerProjectile(x + size / 2, y + size / 2, proW, proH, proxSpeed * -1, proySpeed * 0,
					proDam));
			shotTimer = shotDelay;
		}
		if (input.isKeyDown(Input.KEY_RIGHT) && shotTimer <= 0) {
			direction = "right";
			projectiles.add(
					new PlayerProjectile(x + size / 2, y + size / 2, proW, proH, proxSpeed * 1, proySpeed * 0, proDam));
			shotTimer = shotDelay;
		}
	}

	public void moveRoom(int x, int y) {
		roomX += x;
		roomY += y;
	}

	public int getRoomX() {
		return roomX;
	}

	public int getRoomY() {
		return roomY;
	}

	public String getDirection() {
		return direction;
	}

	public void setDirection(String direction) {
		this.direction = direction;
	}

	public float getCurH() {
		return curH;
	}

	public void setCurH(float curH) {
		this.curH = curH;
	}

	public float getMaxH() {
		return maxH;
	}

	public void setMaxH(float maxH) {
		this.maxH = maxH;
	}

	public String getDirectionM() {
		return directionM;
	}

	public void setDirectionM(String directionM) {
		this.directionM = directionM;
	}

}
