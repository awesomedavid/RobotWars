import java.util.ArrayList;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.Input;

public abstract class Enemies extends GameObject {
	boolean isAlive;
	protected ArrayList<EnemyProjectile> projectiles = new ArrayList<>();
	float curH, maxH;

	Enemies(float x, float y, Image im) {
		super(x, y, im);
		isAlive = true;
	}

	abstract void update(GameContainer gc);

	abstract void draw(Graphics g);

	public float getCurH() {
		return curH;
	}

	public void setCurH(float curH) {
		this.curH = curH;
	}

	public float getMaxH() {
		return maxH;
	}

	public void setMaxH(float maxH) {
		this.maxH = maxH;
	}

}

class BasicE1 extends Enemies {

	float proW, proH, proDam, shotTimer, shotDelay;
	double proxSpeed, proySpeed;
	int size;

	BasicE1(float x, float y, Image im) {
		super(x, y, im);
		maxH = 100;
		curH = maxH;
		size = 50;
		proW = 10;
		proH = 10;
		shotTimer = 0;
		shotDelay = 600;
	}

	public void draw(Graphics g) {
		for (int i = 0; i < projectiles.size(); i++) {
			projectiles.get(i).draw(g);
		}
		g.drawImage(im, x, y);
	}

	public void update(GameContainer gc) {
		speeds();
		if (shotTimer > 0) {
			shotTimer--;
		}
		for (int i = 0; i < projectiles.size(); i++) {
			projectiles.get(i).update(gc);
			if (projectiles.get(i).getX() < 0 || projectiles.get(i).getX() > Engine.width
					|| projectiles.get(i).getY() < 0 || projectiles.get(i).getY() > Engine.height) {
				projectiles.remove(i);
			}
		}
		if (shotTimer <= 0) {
			projectiles.add(new EnemyProjectile(x + size / 2, y + size / 2, proW, proH, proxSpeed, proySpeed, proDam));
			shotTimer = shotDelay;
		}
		movement();
		for (int i = 0; i < Engine.p.projectiles.size(); i++) {
			if (collision(Engine.p.projectiles.get(i).getX(), Engine.p.projectiles.get(i).getX() + 20,
					Engine.p.projectiles.get(i).getY(), Engine.p.projectiles.get(i).getY() + 20)) {
				curH = curH - 10;
				Engine.p.projectiles.remove(i);
			}
		}
	}

	public void movement() {
		double angle = 0;
		angle = Math.toDegrees(Math.atan2(Engine.p.getY() - y, Engine.p.getX() - x));
		if (x != Engine.p.getX() || y != Engine.p.getY()) {
			x += (float) (Math.cos(Math.toRadians(angle)) / 5);
			y += (float) (Math.sin(Math.toRadians(angle)) / 5);
		}
	}

	public void speeds() {
		double angle = 0;
		if (!(x == Engine.p.getX() || y == Engine.p.getY())) {
			angle = Math.toDegrees(Math.atan2(Engine.p.getY() - y, Engine.p.getX() - x));
		}
		proySpeed = Math.sin(Math.toRadians(angle));
		proxSpeed = Math.cos(Math.toRadians(angle));
	}

	public void borders() {
		if (x < 0)
			x = 0;
		if (x + size > Engine.width)
			x = Engine.width - size;
		if (y < 0)
			y = 0;
		if (y + size > Engine.height)
			y = Engine.height - size;
	}
}
